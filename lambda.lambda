$ID: (x => x)
$Y-COMBINATOR: (f => (x => f (x x)) (x => f (x x)))


$TUPLE: (a => b => f => f a b)

$_1: (t => t $FALSE)
$_2: (t => t $TRUE)


$TRUE:  (x => y => x)
$FALSE: (x => y => y)

$NOT: (p => p $FALSE $TRUE)
$AND: (p => q => p q $FALSE)
$OR:  (p => q => p $TRUE q)
$XOR: (p => q => p ($NOT q) q)


$INT-0: (f => x => x)
$INT-1: ($SUCC $INT-0)

$SUCC: (n => f => x => f (n f x))
$PLUS: (m => n => f => x => m f (n f x))
$MULT: (m => n => f => m (n f))

$PRED: (n => f => x => n (g => h => h (g f)) (u => x) (u => u))
$MINUS: (m => n => (n $PRED) m)


$LAMBDA-VARIABLE: (a => b => c => a)
$LAMBDA-VARIABLE-BUILDER: (n => $TUPLE $LAMBDA-VARIABLE n)

$LAMBDA-ABSTRACTION: (a => b => c => b)
$LAMBDA-ABSTRACTION_BUILDER: (t => $TUPLE $LAMBDA-ABSTRACTION t)

$LAMBDA-APPLICATION: (a => b => c => c)
$LAMBDA-APPLICATION-BUILDER: (x => y => $TUPLE $LAMBDA-APPLICATION ($TUPLE x y))


$ONES: (f => n => p => p (f ($SUCC n)) ($LAMBDA-VARIABLE-BUILDER n))


$REDUCE: (f => e => x => n => ($_1 e)
	# Variable
	(($EQ n ($_2 e)) x e)
	# Abstraction
	($LAMBDA-ABSTRACTION-BUILDER (f ($_2 e) x ($SUCC n)))
	# Application
	($LAMBDA-APPLICATION-BUILDER (f ($_1 ($_2 e)) x n) (f ($_2 ($_2 e)) x n))
)
